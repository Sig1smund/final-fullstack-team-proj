{"version":3,"file":"static/js/895.a7add224.chunk.js","mappings":"qRAgBA,EAdoBA,EAAAA,KAAaC,MAAM,CACnCC,MAAOF,EAAAA,KAAaE,MAAM,uBAAuBC,SAAS,qBAAqBC,OAC/EC,SAAUL,EAAAA,KAELG,SAAS,wBACTG,IAAI,EAAG,0CACPC,IAAI,GAAI,0CACRC,QACG,0CACA,4FAEHJ,SCZT,GAAgB,UAAY,6BAA6B,mBAAqB,sCAAsC,2BAA6B,8CAA8C,mBAAqB,sCAAsC,aAAe,gCAAgC,UAAY,6BAA6B,MAAQ,yBAAyB,QAAU,2BAA2B,QAAU,2BAA2B,cAAgB,iCAAiC,qBAAuB,wCAAwC,yBAA2B,6C,UCsFxkB,EAzEkB,WACd,OAAwCK,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,MACjB,GAMIC,EAAAA,EAAAA,IAAQ,CACRC,UAAUC,EAAAA,EAAAA,GAAYC,KANtBC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,MACAC,EAJJ,EAIIA,MACaC,EALjB,EAKIC,UAAaD,OASjB,OACI,4BACI,eAAIE,UAAWC,EAAAA,UAAf,oBACA,kBAAMC,SAAUP,GARP,SAAAQ,GACbf,GAASgB,EAAAA,EAAAA,IAAMD,IACfP,GACH,IAKO,WACI,iBAAKI,UAAWC,EAAAA,mBAAhB,WACI,mBAAOD,UAAWC,EAAAA,UAAlB,WACI,kCACID,UAAS,UAAKC,EAAAA,UAAL,YAAyBH,EAAOpB,MAAQuB,EAAAA,MAAe,GAAvD,YACLJ,EAAM,WAAaC,EAAOpB,MAAQuB,EAAAA,QAAiB,IAEvDI,YAAY,SACRX,EAAS,UALjB,IAMIY,KAAK,WAERR,EAAOpB,QAAS,cAAGsB,UAAWC,EAAAA,cAAd,SAAqCH,EAAOpB,MAAM6B,cAEvE,mBAAOP,UAAWC,EAAAA,UAAlB,WACI,iBAAKD,UAAWC,EAAAA,2BAAhB,WACI,kCACID,UAAS,UAAKC,EAAAA,UAAL,YAAyBH,EAAOjB,SAAWoB,EAAAA,MAAe,GAA1D,YACLJ,EAAM,cAAgBC,EAAOjB,SAAWoB,EAAAA,QAAiB,IAE7DI,YAAY,YACRX,EAAS,aALjB,IAMIY,KAAMpB,EAAe,OAAS,eAElC,mBACIc,UAAWC,EAAAA,mBACXK,KAAK,SACLE,QAAS,kBAAMrB,GAAiBD,EAAvB,OAShBY,EAAOjB,WAAY,cAAGmB,UAAWC,EAAAA,cAAd,SAAqCH,EAAOjB,SAAS0B,iBAGjF,mBAAQP,UAAWC,EAAAA,QAAgBK,KAAK,SAAxC,oBAGA,eAAGN,UAAWC,EAAAA,qBAAd,wCAEI,SAAC,KAAD,CAASQ,GAAG,YAAYT,UAAWC,EAAAA,yBAAnC,8BAOnB,ECpFD,EAAgC,iCCWhC,EARkB,WACd,OACI,gBAAKD,UAAWC,EAAhB,UACI,SAAC,EAAD,KAGX,C","sources":["components/LoginForm/Yup.js","webpack://final-fullstack-team-proj/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","webpack://final-fullstack-team-proj/./src/pages/LoginPage/LoginPage.module.css?f8e0","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nconst loginSchema = yup.object().shape({\n    email: yup.string().email('Enter a valid Email').required('Email is required').trim(),\n    password: yup\n        .string()\n        .required('Password is required')\n        .min(6, 'Password must be at least 6 characters')\n        .max(16, 'Password must be at most 16 characters')\n        .matches(\n            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{6,16}$/,\n            'Password must contain at least one uppercase letter, one lowercase letter, and one digit'\n        )\n        .trim(),\n});\n\nexport default loginSchema;","// extracted by mini-css-extract-plugin\nexport default {\"formTitle\":\"LoginForm_formTitle__xGeGl\",\"formLabelConteiner\":\"LoginForm_formLabelConteiner__ika6h\",\"formLabelPasswordConteiner\":\"LoginForm_formLabelPasswordConteiner__sKp3v\",\"showPasswordButton\":\"LoginForm_showPasswordButton__-Wrzx\",\"passwordIcon\":\"LoginForm_passwordIcon__Ls6HM\",\"formInput\":\"LoginForm_formInput__kt+x6\",\"error\":\"LoginForm_error__012y+\",\"success\":\"LoginForm_success__46ZCk\",\"authBtn\":\"LoginForm_authBtn__pJOjM\",\"errorsMassage\":\"LoginForm_errorsMassage__rn23v\",\"authScreenNavigation\":\"LoginForm_authScreenNavigation__gWd7T\",\"authScreenNavigationLink\":\"LoginForm_authScreenNavigationLink__z72yD\"};","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { logIn } from 'redux/auth/operations';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport loginSchema from './Yup';\n\n// Icons\n// import { ReactComponent as EyeOpen } from 'images/icons/eye-open.svg';\n// import { ReactComponent as EyeClosed } from 'images/icons/eye-closed.svg';\n\nimport styles from './LoginForm.module.css';\n\nconst LoginForm = () => {\n    const [showPassword, setShowPassword] = useState(false); // стан для показу / приховування пароля\n\n    const dispatch = useDispatch();\n    const {\n        register,\n        handleSubmit,\n        reset,\n        watch,\n        formState: { errors },\n    } = useForm({\n        resolver: yupResolver(loginSchema),\n    });\n    const onSubmit = data => {\n        dispatch(logIn(data));\n        reset();\n    };\n\n    return (\n        <div>\n            <h2 className={styles.formTitle}>Login</h2>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className={styles.formLabelConteiner}>\n                    <label className={styles.formLabel}>\n                        <input\n                            className={`${styles.formInput} ${errors.email ? styles.error : ''} ${\n                                watch('email') && !errors.email ? styles.success : ''\n                            }`}\n                            placeholder=\"Email\"\n                            {...register('email')}\n                            type=\"email\"\n                        />\n                        {errors.email && <p className={styles.errorsMassage}>{errors.email.message}</p>}\n                    </label>\n                    <label className={styles.formLabel}>\n                        <div className={styles.formLabelPasswordConteiner}>\n                            <input\n                                className={`${styles.formInput} ${errors.password ? styles.error : ''} ${\n                                    watch('password') && !errors.password ? styles.success : ''\n                                }`}\n                                placeholder=\"Password\"\n                                {...register('password')}\n                                type={showPassword ? 'text' : 'password'} // Встановлюємо тип як \"password\" або \"text\", залежно від стану\n                            />\n                            <button\n                                className={styles.showPasswordButton}\n                                type=\"button\"\n                                onClick={() => setShowPassword(!showPassword)}\n                            >\n                                {/* {showPassword ? (\n                                    <EyeClosed className={styles.passwordIcon} />\n                                ) : (\n                                    <EyeOpen className={styles.passwordIcon} />\n                                )} */}\n                            </button>\n                        </div>\n                        {errors.password && <p className={styles.errorsMassage}>{errors.password.message}</p>}\n                    </label>\n                </div>\n                <button className={styles.authBtn} type=\"submit\">\n                    Login\n                </button>\n                <p className={styles.authScreenNavigation}>\n                    Don't have an account?&nbsp;\n                    <NavLink to=\"/register\" className={styles.authScreenNavigationLink}>\n                        Register\n                    </NavLink>\n                </p>\n            </form>\n        </div>\n    );\n};\n\nexport default LoginForm;","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"LoginPage_formContainer__heTJ-\"};","import LoginForm from 'components/LoginForm';\n\nimport styles from './LoginPage.module.css';\n\nconst LoginPage = () => {\n    return (\n        <div className={styles.formContainer}>\n            <LoginForm />\n        </div>\n    );\n};\n\nexport default LoginPage;"],"names":["yup","shape","email","required","trim","password","min","max","matches","useState","showPassword","setShowPassword","dispatch","useDispatch","useForm","resolver","yupResolver","loginSchema","register","handleSubmit","reset","watch","errors","formState","className","styles","onSubmit","data","logIn","placeholder","type","message","onClick","to"],"sourceRoot":""}