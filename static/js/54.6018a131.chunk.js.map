{"version":3,"file":"static/js/54.6018a131.chunk.js","mappings":"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","sources":["webpack://final-fullstack-team-proj/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/Yup.js","components/RegisterForm/RegisterForm.jsx","webpack://final-fullstack-team-proj/./src/pages/RegisterPage/RegisterPage.module.css?fdcb","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formTitle\":\"RegisterForm_formTitle__YlpKI\",\"formLabelConteiner\":\"RegisterForm_formLabelConteiner__IcVDC\",\"formLabelPasswordConteiner\":\"RegisterForm_formLabelPasswordConteiner__Nxwlt\",\"showPasswordButton\":\"RegisterForm_showPasswordButton__jrdkw\",\"passwordIcon\":\"RegisterForm_passwordIcon__1O5tr\",\"formInput\":\"RegisterForm_formInput__Rum0L\",\"error\":\"RegisterForm_error__yDHjz\",\"success\":\"RegisterForm_success__4UeKG\",\"authBtn\":\"RegisterForm_authBtn__W+wnc global_desktopLoginButton__z9H8G\",\"errorsMassage\":\"RegisterForm_errorsMassage__2oCbs\",\"authScreenNavigation\":\"RegisterForm_authScreenNavigation__XO+RA\",\"authScreenNavigationLink\":\"RegisterForm_authScreenNavigationLink__jg-0O\"};","import * as yup from 'yup';\n\nconst registerSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Name must be at least 2 characters!')\n    .max(16, 'Name must be at most 16 characters!')\n    .required('Name is required'),\n  email: yup.string().email().required('Email is required'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(6, 'Password must be at least 6 characters')\n    .max(16, 'Password must be at most 16 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{6,16}$/,\n      'Password must contain at least one uppercase letter, one lowercase letter, and one digit'\n    ),\n  password2: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match')\n    .required('Confirm password is required'),\n});\n\nexport default registerSchema;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport  { registerUser }  from '../../redux/auth/operations';\nimport sprite from '../../images/sprite.svg';\nimport styles from './RegisterForm.module.css';\n// import { changeIsRegistered } from '../../redux/auth/authSlice';\nimport registerSchema from './Yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nconst RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showPassword2, setShowPassword2] = useState(false);\n\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    watch,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(registerSchema),\n  });\n\n  const onSubmit = data => {\n    \n    const  { name,  email, password}=data;\n    dispatch(registerUser({name, email, password}));\n    reset();\n  };\n\n  return (\n    <div>\n      <h2 className={styles.formTitle}>Registration</h2>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className={styles.formLabelConteiner}>\n          <label className={styles.formLabel}>\n            <input\n              className={`${styles.formInput} ${errors.email ? styles.error : ''\n                } ${watch('name') && !errors.name ? styles.success : ''}`}\n              placeholder=\"Name\"\n              {...register('name')}\n              type=\"text\"\n            />\n            {errors.name && (\n              <p className={styles.errorsMassage}>{errors.name.message}</p>\n            )}\n          </label>\n          <label className={styles.formLabel}>\n            <input\n              className={`${styles.formInput} ${errors.email ? styles.error : ''\n                } ${watch('email') && !errors.email ? styles.success : ''}`}\n              placeholder=\"Email\"\n              {...register('email')}\n              type=\"email\"\n            />\n            {errors.email && (\n              <p className={styles.errorsMassage}>{errors.email.message}</p>\n            )}\n          </label>\n          <label className={styles.formLabel}>\n            <div className={styles.formLabelPasswordConteiner}>\n              <input\n                className={`${styles.formInput} ${errors.password ? styles.error : ''\n                  } ${watch('password') && !errors.password ? styles.success : ''\n                  }`}\n                placeholder=\"Password\"\n                {...register('password')}\n                type={showPassword ? 'text' : 'password'} // Встановлюємо тип як \"password\" або \"text\", залежно від стану\n              />\n              <button\n                className={styles.showPasswordButton}\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? (\n                  <svg className={styles.passwordIcon}>\n                    <use href={`${sprite}#eye-open`} />\n                  </svg>\n                ) : (\n                  <svg className={styles.passwordIcon}>\n                    <use href={`${sprite}#eye-closed`} />\n                  </svg>\n                )}\n              </button>\n            </div>\n            {errors.password && (\n              <p className={styles.errorsMassage}>{errors.password.message}</p>\n            )}\n          </label>\n\n          <label className={styles.formLabel}>\n            <div className={styles.formLabelPasswordConteiner}>\n              <input\n                className={`${styles.formInput} ${errors.password2 ? styles.error : ''\n                  } ${watch('password2') && !errors.password2 ? styles.success : ''\n                  }`}\n                placeholder=\"Confirm password\"\n                {...register('password2')}\n                type={showPassword2 ? 'text' : 'password'}\n              />\n              <button\n                className={styles.showPasswordButton}\n                type=\"button\"\n                onClick={() => setShowPassword2(!showPassword2)}\n              >\n                {showPassword2 ? (\n                  <svg className={styles.passwordIcon}>\n                    <use href={`${sprite}#eye-open`} />\n                  </svg>\n                ) : (\n                  <svg className={styles.passwordIcon}>\n                    <use href={`${sprite}#eye-closed`} />\n                  </svg>\n                )}\n              </button>\n            </div>\n            {errors.password2 && (\n              <p className={styles.errorsMassage}>{errors.password2.message}</p>\n            )}\n          </label>\n        </div>\n        <button className={styles.authBtn} type=\"submit\">\n          Registration\n        </button>\n        <p className={styles.authScreenNavigation}>\n          Already have an account?&nbsp;\n          <NavLink to=\"/login\" className={styles.authScreenNavigationLink}>\n            Login\n          </NavLink>\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default RegisterForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"RegisterPage_formContainer__pZjkV\"};","import React from 'react';\nimport RegisterForm from 'components/RegisterForm';\n\nimport styles from './RegisterPage.module.css';\n\nconst RegisterPage = () => {\n    return (\n        <div> \n            <div className={styles.formContainer}>\n                <RegisterForm />\n            </div>\n        </div>\n    );\n};\n\nexport default RegisterPage;"],"names":["yup","shape","name","min","max","required","email","password","matches","password2","oneOf","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","showPassword2","setShowPassword2","dispatch","useDispatch","_useForm","useForm","resolver","yupResolver","registerSchema","register","handleSubmit","reset","watch","errors","formState","_jsxs","children","_jsx","className","styles","onSubmit","data","registerUser","_objectSpread","concat","placeholder","type","message","onClick","href","sprite","NavLink","to","RegisterForm"],"sourceRoot":""}